// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
}
model Post {
    id        Int      @id @default(autoincrement())
    name      String
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}


model User {
    id   String  @id @default(uuid())
    email String  @unique
    name  String?
    password String
    mob   String?
    isAdmin Boolean @default(false)
    isIn    Boolean  @default(false)
    token   String     @default(uuid()) @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    TaskAssignee Task[]     @relation("taskAssignee_Id")
    TaskReporter Task[]     @relation("taskReporter_Id")
    TeamAdmin Team[]
    TeamMembers TeamMember[]
    TaskActivity TaskActivity[]
    Story Story[]

    @@index([token])

}

model Story {
    id     String        @id @default(uuid())
    dueDate   DateTime           
    title     String
    des       String?
    stage     String
    priority  String
    teamId String
    createdBy String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    TeamIdId Team @relation(fields: [teamId], references: [id])
    CreatedById User @relation(fields: [createdBy], references: [id])
    Task        Task[]

    @@index([teamId])
}


model Task {
    id      String        @id @default(uuid())
    dueDate   DateTime     
    assignee  String      
    reporter  String        
    title     String
    des       String?
    stage     String
    priority  String
    storyId    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    TaskActivity TaskActivity[]
    assigneeId User @relation("taskAssignee_Id",fields: [assignee], references: [id])
    reporterId User @relation("taskReporter_Id",fields: [reporter], references: [id])
    storyIdId   Story? @relation(fields: [storyId], references: [id])

    @@index([stage])
}

model Team {
    id  String  @id @default(uuid())
    adminId String
    name    String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    adminIdId User @relation(fields: [adminId], references: [id])
    TeamMembers TeamMember[]
    Story Story[]

    @@index([adminId])
}

model TaskActivity {
    id      String        @id @default(uuid())
    taskId  String
    userId  String
    action  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    taskIdId Task @relation(fields: [taskId], references: [id])
    userIdId  User @relation(fields: [userId], references: [id])

    @@index([taskId])

}

model TeamMember {
    id      String        @id @default(uuid())
    teamId  String
    userId  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teamIdId Team @relation(fields: [teamId], references: [id])
    userIdId  User @relation(fields: [userId], references: [id])
}